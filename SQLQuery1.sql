CREATE TABLE Users (
    Id UNIQUEIDENTIFIER DEFAULT NEWID() PRIMARY KEY,
    Username NVARCHAR(50) NOT NULL UNIQUE,
    Email NVARCHAR(100) NOT NULL UNIQUE,
    Password NVARCHAR(255) NOT NULL,
    CreatedAt DATETIME DEFAULT GETDATE()
);

CREATE TABLE Songs (
    Id UNIQUEIDENTIFIER DEFAULT NEWID() PRIMARY KEY,
    Title NVARCHAR(100) NOT NULL,
    Artist NVARCHAR(100) NOT NULL,
    Genre NVARCHAR(50),
    CreatedAt DATETIME DEFAULT GETDATE()
);


CREATE TABLE Ratings (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    UserId UNIQUEIDENTIFIER NOT NULL FOREIGN KEY REFERENCES Users(Id) ON DELETE CASCADE,
    SongId UNIQUEIDENTIFIER NOT NULL FOREIGN KEY REFERENCES Songs(Id) ON DELETE CASCADE,
    Rating INT NOT NULL CHECK (Rating BETWEEN 1 AND 5),
    CreatedAt DATETIME DEFAULT GETDATE(),
    CONSTRAINT UK_UserSong UNIQUE (UserId, SongId) -- Prevent duplicate ratings
);


CREATE TABLE Playlists (
    Id UNIQUEIDENTIFIER DEFAULT NEWID() PRIMARY KEY,
    Name NVARCHAR(100) NOT NULL,
    UserId UNIQUEIDENTIFIER NOT NULL FOREIGN KEY REFERENCES Users(Id) ON DELETE CASCADE,
    CreatedAt DATETIME DEFAULT GETDATE()
);

CREATE TABLE PlaylistSongs (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    PlaylistId UNIQUEIDENTIFIER NOT NULL FOREIGN KEY REFERENCES Playlists(Id) ON DELETE CASCADE,
    SongId UNIQUEIDENTIFIER NOT NULL FOREIGN KEY REFERENCES Songs(Id) ON DELETE CASCADE,
    CONSTRAINT UK_PlaylistSong UNIQUE (PlaylistId, SongId) -- Prevent duplicate entries in a playlist
);

